import logging
import random
import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå –ù–µ—Ç API_TOKEN! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –§–ê–ô–õ –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –õ–ò–î–ï–†–ë–û–†–î–ê ---
LEADERBOARD_FILE = "leaderboard.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if os.path.exists(LEADERBOARD_FILE):
    with open(LEADERBOARD_FILE, "r", encoding="utf-8") as f:
        leaderboard = json.load(f)
else:
    leaderboard = {}  # {"–ò–º—è": [{"score": int, "date": str}, ...]}

# --- –í–û–ü–†–û–°–´ (—Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –¥–æ 50) ---
import logging
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –í–û–ü–†–û–°–´ (50 —à—Ç.) ---
questions = [
    {"q": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 * 8?", "options": ["54", "56", "64", "58"], "a": "56"},
    {"q": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", "options": ["–ë–µ—Ä–ª–∏–Ω", "–ú–∞–¥—Ä–∏–¥", "–ü–∞—Ä–∏–∂", "–†–∏–º"], "a": "–ü–∞—Ä–∏–∂"},
    {"q": "–ö–æ—Ä–µ–Ω—å –∏–∑ 81?", "options": ["8", "9", "7", "11"], "a": "9"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–ï–≤–≥–µ–Ω–∏–π –û–Ω–µ–≥–∏–Ω¬ª?", "options": ["–õ–µ—Ä–º–æ–Ω—Ç–æ–≤", "–ü—É—à–∫–∏–Ω", "–¢–æ–ª—Å—Ç–æ–π", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π"], "a": "–ü—É—à–∫–∏–Ω"},
    {"q": "–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?", "options": ["5", "6", "7", "4"], "a": "6"},
    {"q": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?", "options": ["–ó–µ–º–ª—è", "–í–µ–Ω–µ—Ä–∞", "–ú–µ—Ä–∫—É—Ä–∏–π", "–ú–∞—Ä—Å"], "a": "–ú–µ—Ä–∫—É—Ä–∏–π"},
    {"q": "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –ø—Ä—è–º–æ–º —É–≥–ª–µ?", "options": ["90", "180", "45", "60"], "a": "90"},
    {"q": "–ö—Ç–æ –æ—Ç–∫—Ä—ã–ª –ê–º–µ—Ä–∏–∫—É?", "options": ["–ú–∞–≥–µ–ª–ª–∞–Ω", "–ö–æ–ª—É–º–±", "–ö—É–∫", "–í–∞—Å–∫–æ –¥–∞ –ì–∞–º–∞"], "a": "–ö–æ–ª—É–º–±"},
    {"q": "–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?", "options": ["–ù–∏–ª", "–ê–º–∞–∑–æ–Ω–∫–∞", "–Ø–Ω—Ü–∑—ã", "–í–æ–ª–≥–∞"], "a": "–ê–º–∞–∑–æ–Ω–∫–∞"},
    {"q": "–ê–≤—Ç–æ—Ä —Ä–æ–º–∞–Ω–∞ ¬´–í–æ–π–Ω–∞ –∏ –º–∏—Ä¬ª?", "options": ["–¢–æ–ª—Å—Ç–æ–π", "–ü—É—à–∫–∏–Ω", "–ì–æ–≥–æ–ª—å", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π"], "a": "–¢–æ–ª—Å—Ç–æ–π"},
    {"q": "–°—Ç–æ–ª–∏—Ü–∞ –ò—Ç–∞–ª–∏–∏?", "options": ["–ú–∏–ª–∞–Ω", "–†–∏–º", "–§–ª–æ—Ä–µ–Ω—Ü–∏—è", "–í–µ–Ω–µ—Ü–∏—è"], "a": "–†–∏–º"},
    {"q": "–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–∏–º–≤–æ–ª –≤–æ–¥—ã?", "options": ["O2", "H2O", "CO2", "HO"], "a": "H2O"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–ú—ë—Ä—Ç–≤—ã–µ –¥—É—à–∏¬ª?", "options": ["–ì–æ–≥–æ–ª—å", "–¢–æ–ª—Å—Ç–æ–π", "–¢—É—Ä–≥–µ–Ω–µ–≤", "–ß–µ—Ö–æ–≤"], "a": "–ì–æ–≥–æ–ª—å"},
    {"q": "–°–∫–æ–ª—å–∫–æ —Ö—Ä–æ–º–æ—Å–æ–º —É —á–µ–ª–æ–≤–µ–∫–∞?", "options": ["42", "44", "46", "48"], "a": "46"},
    {"q": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "options": ["7", "8", "9", "10"], "a": "8"},
    {"q": "–ö–∞–∫–∞—è –∫—Ä–æ–≤—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è?", "options": ["I", "II", "III", "IV"], "a": "I"},
    {"q": "–ö—Ç–æ –∏–∑–æ–±—Ä—ë–ª –ª–∞–º–ø–æ—á–∫—É?", "options": ["–≠–¥–∏—Å–æ–Ω", "–¢–µ—Å–ª–∞", "–ü–æ–ø–æ–≤", "–§–∞—Ä–∞–¥–µ–π"], "a": "–≠–¥–∏—Å–æ–Ω"},
    {"q": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 12 * 12?", "options": ["124", "144", "132", "156"], "a": "144"},
    {"q": "–°—Ç–æ–ª–∏—Ü–∞ –ì–µ—Ä–º–∞–Ω–∏–∏?", "options": ["–ë–µ—Ä–ª–∏–Ω", "–ì–∞–º–±—É—Ä–≥", "–ú—é–Ω—Ö–µ–Ω", "–î—Ä–µ–∑–¥–µ–Ω"], "a": "–ë–µ—Ä–ª–∏–Ω"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –ø—å–µ—Å—É ¬´–ì—Ä–æ–∑–∞¬ª?", "options": ["–û—Å—Ç—Ä–æ–≤—Å–∫–∏–π", "–ß–µ—Ö–æ–≤", "–ì–æ—Ä—å–∫–∏–π", "–¢—É—Ä–≥–µ–Ω–µ–≤"], "a": "–û—Å—Ç—Ä–æ–≤—Å–∫–∏–π"},
    {"q": "–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "options": ["–°–∞—Ç—É—Ä–Ω", "–Æ–ø–∏—Ç–µ—Ä", "–£—Ä–∞–Ω", "–ó–µ–º–ª—è"], "a": "–Æ–ø–∏—Ç–µ—Ä"},
    {"q": "–ö–∞–∫–æ–π –≥–∞–∑ –º—ã –≤–¥—ã—Ö–∞–µ–º –ø—Ä–∏ –¥—ã—Ö–∞–Ω–∏–∏?", "options": ["–ê–∑–æ—Ç", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑", "–ì–µ–ª–∏–π"], "a": "–ö–∏—Å–ª–æ—Ä–æ–¥"},
    {"q": "–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤ –≥–æ–¥—É –∏–º–µ–µ—Ç 31 –¥–µ–Ω—å?", "options": ["6", "7", "8", "5"], "a": "7"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–ö–∞–ø–∏—Ç–∞–Ω—Å–∫—É—é –¥–æ—á–∫—É¬ª?", "options": ["–ü—É—à–∫–∏–Ω", "–¢–æ–ª—Å—Ç–æ–π", "–õ–µ—Ä–º–æ–Ω—Ç–æ–≤", "–ß–µ—Ö–æ–≤"], "a": "–ü—É—à–∫–∏–Ω"},
    {"q": "–ö–∞–∫–∞—è —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –Ω–∞ –ó–µ–º–ª–µ?", "options": ["–≠–≤–µ—Ä–µ—Å—Ç", "–ö–∏–ª–∏–º–∞–Ω–¥–∂–∞—Ä–æ", "–≠–ª—å–±—Ä—É—Å", "–ú–æ–Ω–±–ª–∞–Ω"], "a": "–≠–≤–µ—Ä–µ—Å—Ç"},
    {"q": "–ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π?", "options": ["–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–¢–∏—Ö–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π"], "a": "–¢–∏—Ö–∏–π"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–†–µ–≤–∏–∑–æ—Ä¬ª?", "options": ["–ì–æ–≥–æ–ª—å", "–¢–æ–ª—Å—Ç–æ–π", "–¢—É—Ä–≥–µ–Ω–µ–≤", "–ß–µ—Ö–æ–≤"], "a": "–ì–æ–≥–æ–ª—å"},
    {"q": "–°–∫–æ–ª—å–∫–æ –∫–æ—Å—Ç–µ–π —É –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞?", "options": ["206", "210", "196", "201"], "a": "206"},
    {"q": "–§–æ—Ä–º—É–ª–∞ –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞?", "options": ["œÄr¬≤", "2œÄr", "a¬≤", "ab"], "a": "œÄr¬≤"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–î–µ—Ç—Å—Ç–≤–æ¬ª?", "options": ["–¢–æ–ª—Å—Ç–æ–π", "–ì–æ—Ä—å–∫–∏–π", "–¢—É—Ä–≥–µ–Ω–µ–≤", "–ß–µ—Ö–æ–≤"], "a": "–¢–æ–ª—Å—Ç–æ–π"},
    {"q": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏?", "options": ["–†–æ—Å—Å–∏—è", "–ö–∞–Ω–∞–¥–∞", "–ö–∏—Ç–∞–π", "–°–®–ê"], "a": "–†–æ—Å—Å–∏—è"},
    {"q": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 15 * 5?", "options": ["60", "65", "70", "75"], "a": "75"},
    {"q": "–°—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?", "options": ["–¢–æ–∫–∏–æ", "–û—Å–∞–∫–∞", "–ö–∏–æ—Ç–æ", "–ù–∞—Ä–∞"], "a": "–¢–æ–∫–∏–æ"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–ì–µ—Ä–æ–π –Ω–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª?", "options": ["–õ–µ—Ä–º–æ–Ω—Ç–æ–≤", "–¢–æ–ª—Å—Ç–æ–π", "–ü—É—à–∫–∏–Ω", "–ß–µ—Ö–æ–≤"], "a": "–õ–µ—Ä–º–æ–Ω—Ç–æ–≤"},
    {"q": "–ö–∞–∫–∞—è –ø—Ç–∏—Ü–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è?", "options": ["–û—Ä—ë–ª", "–°—Ç—Ä–∞—É—Å", "–ü–µ–ª–∏–∫–∞–Ω", "–ö–æ–Ω–¥–æ—Ä"], "a": "–°—Ç—Ä–∞—É—Å"},
    {"q": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 100 / 4?", "options": ["20", "25", "30", "40"], "a": "25"},
    {"q": "–°—Ç–æ–ª–∏—Ü–∞ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏?", "options": ["–ü–∞—Ä–∏–∂", "–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ú–∞–¥—Ä–∏–¥"], "a": "–õ–æ–Ω–¥–æ–Ω"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–ß–∞–π–∫—É¬ª?", "options": ["–ß–µ—Ö–æ–≤", "–ì–æ—Ä—å–∫–∏–π", "–¢–æ–ª—Å—Ç–æ–π", "–ü—É—à–∫–∏–Ω"], "a": "–ß–µ—Ö–æ–≤"},
    {"q": "–°–∫–æ–ª—å–∫–æ –æ–∫–µ–∞–Ω–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?", "options": ["3", "4", "5", "6"], "a": "5"},
    {"q": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–∫ –∫—Ä–∞—Å–Ω–∞—è?", "options": ["–ú–∞—Ä—Å", "–í–µ–Ω–µ—Ä–∞", "–°–∞—Ç—É—Ä–Ω", "–Æ–ø–∏—Ç–µ—Ä"], "a": "–ú–∞—Ä—Å"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–û—Ç—Ü—ã –∏ –¥–µ—Ç–∏¬ª?", "options": ["–¢—É—Ä–≥–µ–Ω–µ–≤", "–¢–æ–ª—Å—Ç–æ–π", "–ü—É—à–∫–∏–Ω", "–ß–µ—Ö–æ–≤"], "a": "–¢—É—Ä–≥–µ–Ω–µ–≤"},
    {"q": "–°—Ç–æ–ª–∏—Ü–∞ –ö–∏—Ç–∞—è?", "options": ["–ü–µ–∫–∏–Ω", "–®–∞–Ω—Ö–∞–π", "–ì–æ–Ω–∫–æ–Ω–≥", "–¢–æ–∫–∏–æ"], "a": "–ü–µ–∫–∏–Ω"},
    {"q": "–ö—Ç–æ –æ—Ç–∫—Ä—ã–ª –∑–∞–∫–æ–Ω –≤—Å–µ–º–∏—Ä–Ω–æ–≥–æ —Ç—è–≥–æ—Ç–µ–Ω–∏—è?", "options": ["–ù—å—é—Ç–æ–Ω", "–≠–π–Ω—à—Ç–µ–π–Ω", "–ì–∞–ª–∏–ª–µ–π", "–ö–æ–ø–µ—Ä–Ω–∏–∫"], "a": "–ù—å—é—Ç–æ–Ω"},
    {"q": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 9¬≤?", "options": ["81", "72", "91", "99"], "a": "81"},
    {"q": "–°—Ç–æ–ª–∏—Ü–∞ –ò—Å–ø–∞–Ω–∏–∏?", "options": ["–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–ú–∞–¥—Ä–∏–¥", "–°–µ–≤–∏–ª—å—è", "–í–∞–ª–µ–Ω—Å–∏—è"], "a": "–ú–∞–¥—Ä–∏–¥"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü¬ª?", "options": ["–≠–∫–∑—é–ø–µ—Ä–∏", "–¢–æ–ª—Å—Ç–æ–π", "–ì–æ–≥–æ–ª—å", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π"], "a": "–≠–∫–∑—é–ø–µ—Ä–∏"},
    {"q": "–°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–∞ –ó–µ–º–ª–µ?", "options": ["–°–ª–æ–Ω", "–°–∏–Ω–∏–π –∫–∏—Ç", "–ñ–∏—Ä–∞—Ñ", "–ö–∞—à–∞–ª–æ—Ç"], "a": "–°–∏–Ω–∏–π –∫–∏—Ç"},
    {"q": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 64 : 8?", "options": ["6", "7", "8", "9"], "a": "8"},
    {"q": "–°—Ç–æ–ª–∏—Ü–∞ –ö–∞–Ω–∞–¥—ã?", "options": ["–û—Ç—Ç–∞–≤–∞", "–¢–æ—Ä–æ–Ω—Ç–æ", "–ú–æ–Ω—Ä–µ–∞–ª—å", "–í–∞–Ω–∫—É–≤–µ—Ä"], "a": "–û—Ç—Ç–∞–≤–∞"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ¬ª?", "options": ["–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–¢–æ–ª—Å—Ç–æ–π", "–ß–µ—Ö–æ–≤", "–ì–æ–≥–æ–ª—å"], "a": "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π"}
]

# --- –î–ê–ù–ù–´–ï –ò–ì–†–û–ö–û–í ---
user_data = {}     # –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
leaderboard = {}   # –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–æ–≤

def make_keyboard(options):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for opt in options:
        kb.add(KeyboardButton(opt))
    return kb

@dp.message_handler(commands=['start'])
async def start_game(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üéì –≠—Ç–æ —à–∫–æ–ª—å–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üëâ /quiz ‚Äì –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "üëâ /leaderboard ‚Äì —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"
    )

@dp.message_handler(commands=['quiz'])
async def send_question(message: types.Message):
    user_id = message.from_user.id
    shuffled = random.sample(questions, len(questions))  # —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    user_data[user_id] = {"score": 0, "index": 0, "quiz": shuffled}
    await ask_question(message)

async def ask_question(message):
    user_id = message.from_user.id
    idx = user_data[user_id]["index"]

    if idx >= len(user_data[user_id]["quiz"]):  # –∫–æ–Ω–µ—Ü
        score = user_data[user_id]["score"]
        username = message.from_user.first_name

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        if username not in leaderboard or score > leaderboard[username]:
            leaderboard[username] = score

        await message.answer(
            f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(user_data[user_id]['quiz'])}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    q = user_data[user_id]["quiz"][idx]
    kb = make_keyboard(q["options"])
    await message.answer(f"–í–æ–ø—Ä–æ—Å {idx+1} –∏–∑ {len(user_data[user_id]['quiz'])}:\n{q['q']}", reply_markup=kb)

@dp.message_handler(commands=['leaderboard'])
async def show_leaderboard(message: types.Message):
    if not leaderboard:
        await message.answer("üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    sorted_lb = sorted(leaderboard.items(), key=lambda x: x[1], reverse=True)
    text = "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥:\n"
    for i, (user, score) in enumerate(sorted_lb[:10], start=1):
        text += f"{i}. {user} ‚Äî {score} –æ—á–∫–æ–≤\n"
    await message.answer(text)

@dp.message_handler()
async def check_answer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    idx = user_data[user_id]["index"]
    if idx >= len(user_data[user_id]["quiz"]):
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    current_q = user_data[user_id]["quiz"][idx]
    correct = current_q["a"].lower()
    answer = message.text.strip().lower()

    if answer == correct:
        user_data[user_id]["score"] += 1
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_q['a']}")

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    user_data[user_id]["index"] += 1
    await ask_question(message)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)


# --- –î–ê–ù–ù–´–ï –ò–ì–†–û–ö–û–í ---
user_data = {}

def save_leaderboard():
    with open(LEADERBOARD_FILE, "w", encoding="utf-8") as f:
        json.dump(leaderboard, f, ensure_ascii=False, indent=2)

def make_keyboard(options):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for opt in options:
        kb.add(KeyboardButton(opt))
    return kb

def get_leaderboard_with_rank(username=None):
    if not leaderboard:
        return "üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–∫–∞ –ø—É—Å—Ç."

    best_scores = {user: max(attempt["score"] for attempt in scores) for user, scores in leaderboard.items()}
    sorted_lb = sorted(best_scores.items(), key=lambda x: x[1], reverse=True)

    text = "üèÜ –¢–æ–ø-3 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (user, score) in enumerate(sorted_lb[:3], start=1):
        text += f"{i}. {user} ‚Äî {score} –æ—á–∫–æ–≤\n"

    if username and username in best_scores:
        rank = [u for u, _ in sorted_lb].index(username) + 1
        best_score = best_scores[username]
        if rank > 3:
            text += f"\nüìå {username}, —Ç–≤–æ—ë –º–µ—Å—Ç–æ: {rank}/{len(sorted_lb)} (–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score})"
    return text

@dp.message_handler(commands=['start'])
async def start_game(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üéì –≠—Ç–æ —à–∫–æ–ª—å–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üëâ /quiz ‚Äì –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "üëâ /leaderboard ‚Äì —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "üëâ /myresults ‚Äì –º–æ—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫"
    )

@dp.message_handler(commands=['quiz'])
async def send_question(message: types.Message):
    user_id = message.from_user.id
    shuffled = random.sample(questions, len(questions))
    user_data[user_id] = {"score": 0, "index": 0, "quiz": shuffled}
    await ask_question(message)

async def ask_question(message):
    user_id = message.from_user.id
    idx = user_data[user_id]["index"]

    if idx >= len(user_data[user_id]["quiz"]):
        score = user_data[user_id]["score"]
        username = message.from_user.first_name

        if username not in leaderboard:
            leaderboard[username] = []
        leaderboard[username].append({
            "score": score,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M")
        })
        save_leaderboard()

        await message.answer(
            f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
            f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(user_data[user_id]['quiz'])}\n\n"
            f"{get_leaderboard_with_rank(username)}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    q = user_data[user_id]["quiz"][idx]
    kb = make_keyboard(q["options"])
    await message.answer(f"–í–æ–ø—Ä–æ—Å {idx+1} –∏–∑ {len(user_data[user_id]['quiz'])}:\n{q['q']}", reply_markup=kb)

@dp.message_handler(commands=['leaderboard'])
async def show_leaderboard(message: types.Message):
    username = message.from_user.first_name
    await message.answer(get_leaderboard_with_rank(username))

@dp.message_handler(commands=['myresults'])
async def show_my_results(message: types.Message):
    username = message.from_user.first_name
    if username not in leaderboard:
        await message.answer("‚ùå –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å!")
        return

    attempts = leaderboard[username]
    text = f"üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ ({len(attempts)}):\n"
    for i, attempt in enumerate(attempts, start=1):
        text += f"{i}. {attempt['date']} ‚Äî {attempt['score']} –æ—á–∫–æ–≤\n"
    text += f"\nüèÜ –¢–≤–æ–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max(a['score'] for a in attempts)}"
    await message.answer(text)

@dp.message_handler()
async def check_answer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    idx = user_data[user_id]["index"]
    if idx >= len(user_data[user_id]["quiz"]):
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    current_q = user_data[user_id]["quiz"][idx]
    correct = current_q["a"].lower()
    answer = message.text.strip().lower()

    if answer == correct:
        user_data[user_id]["score"] += 1
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_q['a']}")

    user_data[user_id]["index"] += 1
    await ask_question(message)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
