import logging
import random
import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå –ù–µ—Ç API_TOKEN! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –§–ê–ô–õ –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –õ–ò–î–ï–†–ë–û–†–î–ê ---
LEADERBOARD_FILE = "leaderboard.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if os.path.exists(LEADERBOARD_FILE):
    with open(LEADERBOARD_FILE, "r", encoding="utf-8") as f:
        leaderboard = json.load(f)
else:
    leaderboard = {}  # {"–ò–º—è": [{"score": int, "date": str}, ...]}

# --- –í–û–ü–†–û–°–´ (—Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –¥–æ 50) ---
questions = [
    {"q": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 * 8?", "options": ["54", "56", "64", "58"], "a": "56"},
    {"q": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", "options": ["–ë–µ—Ä–ª–∏–Ω", "–ú–∞–¥—Ä–∏–¥", "–ü–∞—Ä–∏–∂", "–†–∏–º"], "a": "–ü–∞—Ä–∏–∂"},
    {"q": "–ö–æ—Ä–µ–Ω—å –∏–∑ 81?", "options": ["8", "9", "7", "11"], "a": "9"},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–ï–≤–≥–µ–Ω–∏–π –û–Ω–µ–≥–∏–Ω¬ª?", "options": ["–õ–µ—Ä–º–æ–Ω—Ç–æ–≤", "–ü—É—à–∫–∏–Ω", "–¢–æ–ª—Å—Ç–æ–π", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π"], "a": "–ü—É—à–∫–∏–Ω"},
    {"q": "–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?", "options": ["5", "6", "7", "4"], "a": "6"},
    # ... –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
]

# --- –î–ê–ù–ù–´–ï –ò–ì–†–û–ö–û–í ---
user_data = {}

def save_leaderboard():
    with open(LEADERBOARD_FILE, "w", encoding="utf-8") as f:
        json.dump(leaderboard, f, ensure_ascii=False, indent=2)

def make_keyboard(options):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for opt in options:
        kb.add(KeyboardButton(opt))
    return kb

def get_leaderboard_with_rank(username=None):
    if not leaderboard:
        return "üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–∫–∞ –ø—É—Å—Ç."

    best_scores = {user: max(attempt["score"] for attempt in scores) for user, scores in leaderboard.items()}
    sorted_lb = sorted(best_scores.items(), key=lambda x: x[1], reverse=True)

    text = "üèÜ –¢–æ–ø-3 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (user, score) in enumerate(sorted_lb[:3], start=1):
        text += f"{i}. {user} ‚Äî {score} –æ—á–∫–æ–≤\n"

    if username and username in best_scores:
        rank = [u for u, _ in sorted_lb].index(username) + 1
        best_score = best_scores[username]
        if rank > 3:
            text += f"\nüìå {username}, —Ç–≤–æ—ë –º–µ—Å—Ç–æ: {rank}/{len(sorted_lb)} (–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score})"
    return text

@dp.message_handler(commands=['start'])
async def start_game(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üéì –≠—Ç–æ —à–∫–æ–ª—å–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üëâ /quiz ‚Äì –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "üëâ /leaderboard ‚Äì —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "üëâ /myresults ‚Äì –º–æ—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫"
    )

@dp.message_handler(commands=['quiz'])
async def send_question(message: types.Message):
    user_id = message.from_user.id
    shuffled = random.sample(questions, len(questions))
    user_data[user_id] = {"score": 0, "index": 0, "quiz": shuffled}
    await ask_question(message)

async def ask_question(message):
    user_id = message.from_user.id
    idx = user_data[user_id]["index"]

    if idx >= len(user_data[user_id]["quiz"]):
        score = user_data[user_id]["score"]
        username = message.from_user.first_name

        if username not in leaderboard:
            leaderboard[username] = []
        leaderboard[username].append({
            "score": score,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M")
        })
        save_leaderboard()

        await message.answer(
            f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
            f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(user_data[user_id]['quiz'])}\n\n"
            f"{get_leaderboard_with_rank(username)}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    q = user_data[user_id]["quiz"][idx]
    kb = make_keyboard(q["options"])
    await message.answer(f"–í–æ–ø—Ä–æ—Å {idx+1} –∏–∑ {len(user_data[user_id]['quiz'])}:\n{q['q']}", reply_markup=kb)

@dp.message_handler(commands=['leaderboard'])
async def show_leaderboard(message: types.Message):
    username = message.from_user.first_name
    await message.answer(get_leaderboard_with_rank(username))

@dp.message_handler(commands=['myresults'])
async def show_my_results(message: types.Message):
    username = message.from_user.first_name
    if username not in leaderboard:
        await message.answer("‚ùå –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å!")
        return

    attempts = leaderboard[username]
    text = f"üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ ({len(attempts)}):\n"
    for i, attempt in enumerate(attempts, start=1):
        text += f"{i}. {attempt['date']} ‚Äî {attempt['score']} –æ—á–∫–æ–≤\n"
    text += f"\nüèÜ –¢–≤–æ–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max(a['score'] for a in attempts)}"
    await message.answer(text)

@dp.message_handler()
async def check_answer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    idx = user_data[user_id]["index"]
    if idx >= len(user_data[user_id]["quiz"]):
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    current_q = user_data[user_id]["quiz"][idx]
    correct = current_q["a"].lower()
    answer = message.text.strip().lower()

    if answer == correct:
        user_data[user_id]["score"] += 1
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_q['a']}")

    user_data[user_id]["index"] += 1
    await ask_question(message)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
